webcamp = :プログラミング学習
puts webcamp

# シンボルはコロン(:)で定義する
# シンボルでは、文字列の前にコロン(:)を定義します。
# 文字列では、シングルクォーテーション（''）
# やダブルクォーテーション（""）
# で囲んで定義します。

 # シンボル
# :プログラミング学習
  # 文字列
# "プログラミング学習"

# シンボルは書き換えられない
# シンボルは変更することができませんが、
# 文字列は変更可能なオブジェクトです。

# シンボルは一意性がある
# シンボルは同じオブジェクトを参照しています。
# object_idメソッドを使用して確認してみます。

# object_idメソッドは、オブジェクト固有のid
# を取得することができます。
# このidによって同じオブジェクトを参照
# しているのか、別のオブジェクトを参照
# しているのか確認することが出来ます。
# 文字列とシンボルのobject_idを確認してみます


# 文字列オブジェクト
dog1 = "犬"
dog2 = "犬"

# シンボルオブジェクト
dog3 = :犬
dog4 = :犬

puts dog1.object_id
puts dog2.object_id
puts dog3.object_id
puts dog4.object_id



# voclabs:~/environment/ruby (main) $  ruby symbol.rbプログラミング学習
# 文字列オブジェクトの場合
# 20537300
# 20537280
# シンボルオブジェクトの場合
# 1061788
# 1061788

# 文字列は、同じobject_idではありませんが
# シンボルは、同じobject_idが
# 割り当てられていますね。
# この結果から、重複した定義を行なった場合、
# シンボルは同じオブジェクトを参照
# していることがわかります。
# つまり、シンボルは一意性があるということ
# がわかります

# シンボルは処理が高速
# シンボルは整数で管理しているため、
# 文字列より高速に処理が行われる

# シンボルは処理が高速であるため
# 、検索などに使用すると良いです。

# シンボルは
# どういう時に使うべきか
# 処理が高速であるため、検索を行う時
# ハッシュのキーなど
# 「同じものが複数あると困るもの」を扱う時


